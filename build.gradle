buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
    }
}


version "3.0.0.M1"
group "io.github.gpc"

apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-doc"
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "io.github.gradle-nexus.publish-plugin"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    provided "org.grails:grails-core"
    provided "org.grails:grails-dependencies"

    compile 'org.springframework:spring-jms'
    compile 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'

    testCompile "org.grails:grails-testing-support"

}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'jms'
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Jms'
                description = 'JMS integration for Grails'
                url = 'https://github.com/gpc/jms'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'brownj'
                        name = 'Jeff Scott Brown'
                        email = 'brownj@objectcomputing.com'
                    }
                    developer {
                        id = 'sbglasius'
                        name = 'SÃ¸ren Berg Glasius'
                        email = 'soeren+gpc@glasius.dk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/gpc/jms.git'
                    developerConnection = 'scm:git:https://github.com/gpc/jms.git'
                    url = 'https://github.com/gpc/jms'
                }
            }
        }
    }
}

ext."signing.keyId" = project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.findProperty('signing.secretKeyRingFile') ?: (System.getenv('SIGNING_PASSPHRASE') ?: "${System.getProperty('user.home')}/.gnupg/secring.gpg")

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

afterEvaluate {
    signing {
        required { isReleaseVersion } //  && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.findProperty('sonatypeOss2Username') ?: ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.findProperty("sonatypeOss2Password") ?: ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.findProperty("sonatypeOssStagingProfileIdJms") ?: ''

            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}
