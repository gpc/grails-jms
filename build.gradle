buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradleVersion"
        classpath 'io.github.gradle-nexus:publish-plugin:1.0.0'
    }
}
plugins {
    id 'org.asciidoctor.jvm.convert' version '3.2.0'
}

apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.grails-doc'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

group 'io.github.gpc'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    api 'org.springframework:spring-jms'

    implementation 'org.grails:grails-core'
    implementation 'org.grails:grails-dependencies'

    implementation 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'

    testImplementation 'org.grails:grails-testing-support'

}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'jms'
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Jms'
                description = 'JMS integration for Grails'
                url = 'https://github.com/gpc/jms'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'brownj'
                        name = 'Jeff Scott Brown'
                        email = 'brownj@objectcomputing.com'
                    }
                    developer {
                        id = 'sbglasius'
                        name = 'SÃ¸ren Berg Glasius'
                        email = 'soeren+gpc@glasius.dk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/gpc/jms.git'
                    developerConnection = 'scm:git:https://github.com/gpc/jms.git'
                    url = 'https://github.com/gpc/jms'
                }
            }
        }
    }
}

ext."signing.keyId" = project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.findProperty('signing.secretKeyRingFile') ?: (System.getenv('SIGNING_PASSPHRASE') ?: "${System.getProperty('user.home')}/.gnupg/secring.gpg")

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

afterEvaluate {
    signing {
        required { isReleaseVersion }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv('SONATYPE_USERNAME') ?: project.findProperty('sonatypeOss2Username') ?: ''
            def ossPass = System.getenv('SONATYPE_PASSWORD') ?: project.findProperty("sonatypeOss2Password") ?: ''
            def ossStagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID') ?: project.findProperty('sonatypeOssStagingProfileIdJms') ?: ''

            nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
            snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

asciidoctor {
    resources {
        from('src/docs/images')
        into "./images"
    }
    sources {
        include 'index.adoc'
    }
    attributes 'experimental': 'true',
            'compat-mode': 'true',
            'toc': 'left',
            'icons': 'font',
            'version': project.version,
            'sourcedir': 'src/main/groovy'
    baseDirFollowsSourceDir()
    outputDir = "${buildDir}/asciidoc"
}

task apiDocs(type: Copy) {
    from groovydoc.outputs.files
    into file("${buildDir}/asciidoc/api")
}

asciidoctor.dependsOn(apiDocs)

task snapshotVersion {
    doLast {
        if(!project.version.endsWith('-SNAPSHOT')) {
            ant.propertyfile(file: "gradle.properties") {
                entry(key: "version", value: "${project.version}-SNAPSHOT")
            }
        }
    }
}